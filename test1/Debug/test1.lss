
test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000636  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  000006aa  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000006ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00000e00  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c59  00000000  00000000  00000f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000442  00000000  00000000  00001bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009df  00000000  00000000  00001ffb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000228  00000000  00000000  000029dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000291  00000000  00000000  00002c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003e8  00000000  00000000  00002e95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e3       	ldi	r30, 0x36	; 54
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 36       	cpi	r26, 0x61	; 97
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 30 01 	call	0x260	; 0x260 <main>
  8a:	0c 94 19 03 	jmp	0x632	; 0x632 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <gmotor_init>:
#include "Gmotor.h"
#include "port.h"

void gmotor_init()
{
	TCCR1A |= (1<<COM1B1) | (1<<WGM10);					//NON INVERTING MODE
  92:	8f b5       	in	r24, 0x2f	; 47
  94:	81 62       	ori	r24, 0x21	; 33
  96:	8f bd       	out	0x2f, r24	; 47
	//TCCR1A &= ~(1<<COM1B0);							// åì ßÏÇ ßÏÇ ÕÝÑ æ ÈÇáÊÇáì ããßä ãßÊÈåÇÔ
	TCCR1B |= (1<<CS10) | (1<<CS11) | (1<<WGM12);		//PRESCALER=64	
  98:	8e b5       	in	r24, 0x2e	; 46
  9a:	8b 60       	ori	r24, 0x0B	; 11
  9c:	8e bd       	out	0x2e, r24	; 46
	//TCCR1B &= ~(1<<CS12);								// åì ßÏÇ ßÏÇ ÕÝÑ æ ÈÇáÊÇáì ããßä ãßÊÈåÇÔ
	
	
	
	pin_write(motor_pins_dir, Gmotor_out1, output);
  9e:	a4 9a       	sbi	0x14, 4	; 20
	pin_write(motor_pins_dir, Gmotor_out2, output);
  a0:	a5 9a       	sbi	0x14, 5	; 20
	pin_write(motor_pins_val, Gmotor_out1, high);
  a2:	ac 9a       	sbi	0x15, 4	; 21
	pin_write(motor_pins_val, Gmotor_out2, low);
  a4:	ad 98       	cbi	0x15, 5	; 21
	
	DDRD |= 1<<PD4 ;	
  a6:	8c 9a       	sbi	0x11, 4	; 17
}
  a8:	08 95       	ret

000000aa <gmotor_speed>:

void gmotor_speed(int s)
{
	OCR1B = s;
  aa:	28 2f       	mov	r18, r24
  ac:	39 2f       	mov	r19, r25
  ae:	39 bd       	out	0x29, r19	; 41
  b0:	28 bd       	out	0x28, r18	; 40
}
  b2:	08 95       	ret

000000b4 <open>:

void open()
{
	pin_write(motor_pins_val, Gmotor_out1, high);
  b4:	ac 9a       	sbi	0x15, 4	; 21
	pin_write(motor_pins_val, Gmotor_out2, low);
  b6:	ad 98       	cbi	0x15, 5	; 21
}
  b8:	08 95       	ret

000000ba <close>:

void close()
{
	pin_write(motor_pins_val, Gmotor_out1, low);
  ba:	ac 98       	cbi	0x15, 4	; 21
	pin_write(motor_pins_val, Gmotor_out2, high);
  bc:	ad 9a       	sbi	0x15, 5	; 21
  be:	08 95       	ret

000000c0 <move_on>:
char s;


void move_on()
{
	forward();
  c0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <forward>
	rightmotor_speed(s);
  c4:	80 91 60 00 	lds	r24, 0x0060
  c8:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <rightmotor_speed>
	leftmotor_speed(20+s);
  cc:	80 91 60 00 	lds	r24, 0x0060
  d0:	8c 5e       	subi	r24, 0xEC	; 236
  d2:	0e 94 cc 00 	call	0x198	; 0x198 <leftmotor_speed>
}
  d6:	08 95       	ret

000000d8 <back>:

void back()
{
	backward();
  d8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <backward>
	rightmotor_speed(s);
  dc:	80 91 60 00 	lds	r24, 0x0060
  e0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <rightmotor_speed>
	leftmotor_speed(s+20);
  e4:	80 91 60 00 	lds	r24, 0x0060
  e8:	8c 5e       	subi	r24, 0xEC	; 236
  ea:	0e 94 cc 00 	call	0x198	; 0x198 <leftmotor_speed>
	
}
  ee:	08 95       	ret

000000f0 <stop>:

void stop()
{
	forward();
  f0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <forward>
	rightmotor_speed(0);
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <rightmotor_speed>
	leftmotor_speed(0);
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	0e 94 cc 00 	call	0x198	; 0x198 <leftmotor_speed>
}
 100:	08 95       	ret

00000102 <forward_right>:


void forward_right()
{
	forward();
 102:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <forward>
	rightmotor_speed(0);
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <rightmotor_speed>
	leftmotor_speed(s);
 10c:	80 91 60 00 	lds	r24, 0x0060
 110:	0e 94 cc 00 	call	0x198	; 0x198 <leftmotor_speed>
	
}
 114:	08 95       	ret

00000116 <forward_left>:

void forward_left()
{
	forward();
 116:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <forward>
	rightmotor_speed(s-20);
 11a:	80 91 60 00 	lds	r24, 0x0060
 11e:	84 51       	subi	r24, 0x14	; 20
 120:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <rightmotor_speed>
	leftmotor_speed(0);
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	0e 94 cc 00 	call	0x198	; 0x198 <leftmotor_speed>
}
 12a:	08 95       	ret

0000012c <backward_right>:

void backward_right()
{
	backward();
 12c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <backward>
	rightmotor_speed(0);
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <rightmotor_speed>
	leftmotor_speed(s);
 136:	80 91 60 00 	lds	r24, 0x0060
 13a:	0e 94 cc 00 	call	0x198	; 0x198 <leftmotor_speed>
}
 13e:	08 95       	ret

00000140 <backward_left>:

void backward_left()
{
	backward();
 140:	0e 94 ff 00 	call	0x1fe	; 0x1fe <backward>
	rightmotor_speed(s-20);
 144:	80 91 60 00 	lds	r24, 0x0060
 148:	84 51       	subi	r24, 0x14	; 20
 14a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <rightmotor_speed>
	leftmotor_speed(0);
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	0e 94 cc 00 	call	0x198	; 0x198 <leftmotor_speed>
}
 154:	08 95       	ret

00000156 <turn90right>:


void turn90right()
{
	reverse_right();
 156:	0e 94 04 01 	call	0x208	; 0x208 <reverse_right>
	rightmotor_speed(s);
 15a:	80 91 60 00 	lds	r24, 0x0060
 15e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <rightmotor_speed>
	leftmotor_speed(s);
 162:	80 91 60 00 	lds	r24, 0x0060
 166:	0e 94 cc 00 	call	0x198	; 0x198 <leftmotor_speed>
}
 16a:	08 95       	ret

0000016c <turn90left>:

void turn90left()
{
	reverse_left();
 16c:	0e 94 09 01 	call	0x212	; 0x212 <reverse_left>
	rightmotor_speed(s);
 170:	80 91 60 00 	lds	r24, 0x0060
 174:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <rightmotor_speed>
	leftmotor_speed(s);
 178:	80 91 60 00 	lds	r24, 0x0060
 17c:	0e 94 cc 00 	call	0x198	; 0x198 <leftmotor_speed>
}
 180:	08 95       	ret

00000182 <motor_init>:



motor_init()
{
	pin_write(motor_pins_dir,rightmotor_out1,output);
 182:	a0 9a       	sbi	0x14, 0	; 20
	pin_write(motor_pins_dir,rightmotor_out2,output);
 184:	a1 9a       	sbi	0x14, 1	; 20
	pin_write(motor_pins_dir,leftmotor_out1,output);
 186:	a2 9a       	sbi	0x14, 2	; 20
	pin_write(motor_pins_dir,leftmotor_out2,output);
 188:	a3 9a       	sbi	0x14, 3	; 20
	pin_write(motor_pins_val,rightmotor_out1,high);
 18a:	a8 9a       	sbi	0x15, 0	; 21
	pin_write(motor_pins_val,rightmotor_out2,low);
 18c:	a9 98       	cbi	0x15, 1	; 21
	pin_write(motor_pins_val,leftmotor_out1,low);
 18e:	aa 98       	cbi	0x15, 2	; 21
	pin_write(motor_pins_val,leftmotor_out2,high);
 190:	ab 9a       	sbi	0x15, 3	; 21
	pin_write(DDRB,pin3,output);
 192:	bb 9a       	sbi	0x17, 3	; 23
	pin_write(DDRD,pin7,output);	
 194:	8f 9a       	sbi	0x11, 7	; 17
}
 196:	08 95       	ret

00000198 <leftmotor_speed>:



leftmotor_speed(char s)
{
	OCR0=s;
 198:	8c bf       	out	0x3c, r24	; 60
	TCCR0=(TCCR0&(~(1<<WGM01)))|(0<<WGM01);		// select mode ...
 19a:	83 b7       	in	r24, 0x33	; 51
 19c:	87 7f       	andi	r24, 0xF7	; 247
 19e:	83 bf       	out	0x33, r24	; 51
	pin_write(TCCR0,WGM00,high);				// mode -> fast pwm
 1a0:	83 b7       	in	r24, 0x33	; 51
 1a2:	80 64       	ori	r24, 0x40	; 64
 1a4:	83 bf       	out	0x33, r24	; 51
	pin_write(TCCR0,CS02,low);					// clock selector
 1a6:	83 b7       	in	r24, 0x33	; 51
 1a8:	8b 7f       	andi	r24, 0xFB	; 251
 1aa:	83 bf       	out	0x33, r24	; 51
	pin_write(TCCR0,CS01,high);					//...
 1ac:	83 b7       	in	r24, 0x33	; 51
 1ae:	82 60       	ori	r24, 0x02	; 2
 1b0:	83 bf       	out	0x33, r24	; 51
	pin_write(TCCR0,CS00,high);					// clk/64
 1b2:	83 b7       	in	r24, 0x33	; 51
 1b4:	81 60       	ori	r24, 0x01	; 1
 1b6:	83 bf       	out	0x33, r24	; 51
	pin_write(TCCR0,COM00,low);					// compare output mode
 1b8:	83 b7       	in	r24, 0x33	; 51
 1ba:	8f 7e       	andi	r24, 0xEF	; 239
 1bc:	83 bf       	out	0x33, r24	; 51
	pin_write(TCCR0,COM01,high);				// non-inverted
 1be:	83 b7       	in	r24, 0x33	; 51
 1c0:	80 62       	ori	r24, 0x20	; 32
 1c2:	83 bf       	out	0x33, r24	; 51
		
}
 1c4:	08 95       	ret

000001c6 <rightmotor_speed>:

rightmotor_speed(char s)
{
	
	OCR2=s;
 1c6:	83 bd       	out	0x23, r24	; 35
	pin_write(TCCR2,WGM21,low);
 1c8:	85 b5       	in	r24, 0x25	; 37
 1ca:	87 7f       	andi	r24, 0xF7	; 247
 1cc:	85 bd       	out	0x25, r24	; 37
	pin_write(TCCR2,WGM20,high);
 1ce:	85 b5       	in	r24, 0x25	; 37
 1d0:	80 64       	ori	r24, 0x40	; 64
 1d2:	85 bd       	out	0x25, r24	; 37
	pin_write(TCCR2,CS22,high);
 1d4:	85 b5       	in	r24, 0x25	; 37
 1d6:	84 60       	ori	r24, 0x04	; 4
 1d8:	85 bd       	out	0x25, r24	; 37
	pin_write(TCCR2,CS21,low);
 1da:	85 b5       	in	r24, 0x25	; 37
 1dc:	8d 7f       	andi	r24, 0xFD	; 253
 1de:	85 bd       	out	0x25, r24	; 37
	pin_write(TCCR2,CS20,low);
 1e0:	85 b5       	in	r24, 0x25	; 37
 1e2:	8e 7f       	andi	r24, 0xFE	; 254
 1e4:	85 bd       	out	0x25, r24	; 37
	pin_write(TCCR2,COM20,low);
 1e6:	85 b5       	in	r24, 0x25	; 37
 1e8:	8f 7e       	andi	r24, 0xEF	; 239
 1ea:	85 bd       	out	0x25, r24	; 37
	pin_write(TCCR2,COM21,high);
 1ec:	85 b5       	in	r24, 0x25	; 37
 1ee:	80 62       	ori	r24, 0x20	; 32
 1f0:	85 bd       	out	0x25, r24	; 37
}
 1f2:	08 95       	ret

000001f4 <forward>:



void forward()
{
	pin_write(motor_pins_val,rightmotor_out1,high);
 1f4:	a8 9a       	sbi	0x15, 0	; 21
	pin_write(motor_pins_val,rightmotor_out2,low);
 1f6:	a9 98       	cbi	0x15, 1	; 21
	pin_write(motor_pins_val,leftmotor_out1,high);
 1f8:	aa 9a       	sbi	0x15, 2	; 21
	pin_write(motor_pins_val,leftmotor_out2,low);
 1fa:	ab 98       	cbi	0x15, 3	; 21
}
 1fc:	08 95       	ret

000001fe <backward>:

void backward()
{
	pin_write(motor_pins_val,rightmotor_out1,low);
 1fe:	a8 98       	cbi	0x15, 0	; 21
	pin_write(motor_pins_val,rightmotor_out2,high);
 200:	a9 9a       	sbi	0x15, 1	; 21
	pin_write(motor_pins_val,leftmotor_out1,low);
 202:	aa 98       	cbi	0x15, 2	; 21
	pin_write(motor_pins_val,leftmotor_out2,high);
 204:	ab 9a       	sbi	0x15, 3	; 21
}
 206:	08 95       	ret

00000208 <reverse_right>:

void reverse_right()
{
	pin_write(motor_pins_val,rightmotor_out1,low);
 208:	a8 98       	cbi	0x15, 0	; 21
	pin_write(motor_pins_val,rightmotor_out2,high);
 20a:	a9 9a       	sbi	0x15, 1	; 21
	pin_write(motor_pins_val,leftmotor_out1,high);
 20c:	aa 9a       	sbi	0x15, 2	; 21
	pin_write(motor_pins_val,leftmotor_out2,low);
 20e:	ab 98       	cbi	0x15, 3	; 21
}
 210:	08 95       	ret

00000212 <reverse_left>:

void reverse_left()
{
	pin_write(motor_pins_val,rightmotor_out1,high);
 212:	a8 9a       	sbi	0x15, 0	; 21
	pin_write(motor_pins_val,rightmotor_out2,low);
 214:	a9 98       	cbi	0x15, 1	; 21
	pin_write(motor_pins_val,leftmotor_out1,low);
 216:	aa 98       	cbi	0x15, 2	; 21
	pin_write(motor_pins_val,leftmotor_out2,high);
 218:	ab 9a       	sbi	0x15, 3	; 21
 21a:	08 95       	ret

0000021c <servo_init>:


servo_init()
{
	//Configure TIMER1
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
 21c:	8f b5       	in	r24, 0x2f	; 47
 21e:	82 6a       	ori	r24, 0xA2	; 162
 220:	8f bd       	out	0x2f, r24	; 47
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //PRESCALER=64 MODE 14(FAST PWM)
 222:	8e b5       	in	r24, 0x2e	; 46
 224:	8b 61       	ori	r24, 0x1B	; 27
 226:	8e bd       	out	0x2e, r24	; 46
	
	ICR1=4999;  //fPWM=50Hz (Period = 20ms Standard).
 228:	87 e8       	ldi	r24, 0x87	; 135
 22a:	93 e1       	ldi	r25, 0x13	; 19
 22c:	97 bd       	out	0x27, r25	; 39
 22e:	86 bd       	out	0x26, r24	; 38
	
	DDRD|=(1<<PD4)|(1<<PD5);   //PWM Pins as Out
 230:	81 b3       	in	r24, 0x11	; 17
 232:	80 63       	ori	r24, 0x30	; 48
 234:	81 bb       	out	0x11, r24	; 17
}
 236:	08 95       	ret

00000238 <angle>:



angle( int a )
{
	OCR1A = a ;
 238:	28 2f       	mov	r18, r24
 23a:	39 2f       	mov	r19, r25
 23c:	3b bd       	out	0x2b, r19	; 43
 23e:	2a bd       	out	0x2a, r18	; 42
}
 240:	08 95       	ret

00000242 <Wait>:



//Simple Wait Function
void Wait()
{
 242:	22 e3       	ldi	r18, 0x32	; 50
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	fc 01       	movw	r30, r24
 24a:	31 97       	sbiw	r30, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <Wait+0x8>
 24e:	fc 01       	movw	r30, r24
 250:	31 97       	sbiw	r30, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <Wait+0xe>
 254:	fc 01       	movw	r30, r24
 256:	31 97       	sbiw	r30, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <Wait+0x14>
 25a:	21 50       	subi	r18, 0x01	; 1
	uint8_t i;
	for(i=0;i<50;i++)
 25c:	a9 f7       	brne	.-22     	; 0x248 <Wait+0x6>
		_delay_loop_2(0);
		_delay_loop_2(0);
		_delay_loop_2(0);
	}

 25e:	08 95       	ret

00000260 <main>:

int main(void)
{
	int position = 316;
	
	USART_Init(9600);
 260:	80 e8       	ldi	r24, 0x80	; 128
 262:	95 e2       	ldi	r25, 0x25	; 37
 264:	0e 94 ca 02 	call	0x594	; 0x594 <USART_Init>
	motor_init();
 268:	0e 94 c1 00 	call	0x182	; 0x182 <motor_init>
	servo_init();
 26c:	0e 94 0e 01 	call	0x21c	; 0x21c <servo_init>
	unsigned char d;
	DDRA = 255;
 270:	8f ef       	ldi	r24, 0xFF	; 255
 272:	8a bb       	out	0x1a, r24	; 26
	
	OCR1A = 316 ;
 274:	8c e3       	ldi	r24, 0x3C	; 60
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	9b bd       	out	0x2b, r25	; 43
 27a:	8a bd       	out	0x2a, r24	; 42
	s=0;
 27c:	10 92 60 00 	sts	0x0060, r1
	int x = 30 ;		//for gmotor   Griper
	int ba=320;
 280:	0f 2e       	mov	r0, r31
 282:	f0 e4       	ldi	r31, 0x40	; 64
 284:	ef 2e       	mov	r14, r31
 286:	f1 e0       	ldi	r31, 0x01	; 1
 288:	ff 2e       	mov	r15, r31
 28a:	f0 2d       	mov	r31, r0



int main(void)
{
	int position = 316;
 28c:	0c e3       	ldi	r16, 0x3C	; 60
 28e:	11 e0       	ldi	r17, 0x01	; 1
		d = USART_Receive();
		
		////**** Test Bleutooth ****////
		if (d == 'U')
		{
			PORTA=1;
 290:	dd 24       	eor	r13, r13
 292:	d3 94       	inc	r13
		{
			PORTA=0;
		}
		else if ( d == 'I')
		{
			PORTA = 2;
 294:	d2 e0       	ldi	r29, 0x02	; 2
		
		
		///////*** speed
		if ( d == 'T')
		{
			s = 255;
 296:	cc 24       	eor	r12, r12
 298:	ca 94       	dec	r12
		////////**** Griper ****///////
		if ( d == 'O')
		{
			
			angle(535);
			position = 525;
 29a:	0f 2e       	mov	r0, r31
 29c:	fd e0       	ldi	r31, 0x0D	; 13
 29e:	8f 2e       	mov	r8, r31
 2a0:	f2 e0       	ldi	r31, 0x02	; 2
 2a2:	9f 2e       	mov	r9, r31
 2a4:	f0 2d       	mov	r31, r0
		{
			s = 150;
		}
		else if ( d == 'y')
		{
			s = 100;
 2a6:	0f 2e       	mov	r0, r31
 2a8:	f4 e6       	ldi	r31, 0x64	; 100
 2aa:	6f 2e       	mov	r6, r31
 2ac:	f0 2d       	mov	r31, r0
		{
			s = 200;
		}
		else if ( d == 'Y')
		{
			s = 150;
 2ae:	0f 2e       	mov	r0, r31
 2b0:	f6 e9       	ldi	r31, 0x96	; 150
 2b2:	af 2e       	mov	r10, r31
 2b4:	f0 2d       	mov	r31, r0
		{
			s = 255;
		} 
		else if( d == 't')
		{
			s = 200;
 2b6:	0f 2e       	mov	r0, r31
 2b8:	f8 ec       	ldi	r31, 0xC8	; 200
 2ba:	bf 2e       	mov	r11, r31
 2bc:	f0 2d       	mov	r31, r0
			PORTA=0;
			
		} 
		else if ( d == 's')
		{
			s=50;
 2be:	0f 2e       	mov	r0, r31
 2c0:	f2 e3       	ldi	r31, 0x32	; 50
 2c2:	7f 2e       	mov	r7, r31
 2c4:	f0 2d       	mov	r31, r0
	int x = 30 ;		//for gmotor   Griper
	int ba=320;
	
    while(1)
    {		
		d = USART_Receive();
 2c6:	0e 94 c6 02 	call	0x58c	; 0x58c <USART_Receive>
 2ca:	c8 2f       	mov	r28, r24
		
		////**** Test Bleutooth ****////
		if (d == 'U')
 2cc:	85 35       	cpi	r24, 0x55	; 85
 2ce:	11 f4       	brne	.+4      	; 0x2d4 <main+0x74>
		{
			PORTA=1;
 2d0:	db ba       	out	0x1b, r13	; 27
 2d2:	11 c0       	rjmp	.+34     	; 0x2f6 <main+0x96>
		}
		else if (d == 'u')
 2d4:	85 37       	cpi	r24, 0x75	; 117
 2d6:	11 f4       	brne	.+4      	; 0x2dc <main+0x7c>
		{
			PORTA=0;
 2d8:	1b ba       	out	0x1b, r1	; 27
 2da:	0d c0       	rjmp	.+26     	; 0x2f6 <main+0x96>
		}
		else if ( d == 'I')
 2dc:	89 34       	cpi	r24, 0x49	; 73
 2de:	11 f4       	brne	.+4      	; 0x2e4 <main+0x84>
		{
			PORTA = 2;
 2e0:	db bb       	out	0x1b, r29	; 27
 2e2:	09 c0       	rjmp	.+18     	; 0x2f6 <main+0x96>
		}
		else if ( d == 'i')
 2e4:	89 36       	cpi	r24, 0x69	; 105
 2e6:	11 f4       	brne	.+4      	; 0x2ec <main+0x8c>
		{
			PORTA = 0;
 2e8:	1b ba       	out	0x1b, r1	; 27
 2ea:	05 c0       	rjmp	.+10     	; 0x2f6 <main+0x96>
		}
		////**** End Test Bleutooth ****////
		
		
		///////*** MOVING ***////////
		if ( d == 'Q')
 2ec:	81 35       	cpi	r24, 0x51	; 81
 2ee:	19 f4       	brne	.+6      	; 0x2f6 <main+0x96>
		{
			move_on();
 2f0:	0e 94 60 00 	call	0xc0	; 0xc0 <move_on>
 2f4:	2d c0       	rjmp	.+90     	; 0x350 <main+0xf0>
		}
		else if ( d == 'q')
 2f6:	c1 37       	cpi	r28, 0x71	; 113
 2f8:	19 f4       	brne	.+6      	; 0x300 <main+0xa0>
		{
			back();
 2fa:	0e 94 6c 00 	call	0xd8	; 0xd8 <back>
 2fe:	28 c0       	rjmp	.+80     	; 0x350 <main+0xf0>
		}
		else if ( d == 'e')
 300:	c5 36       	cpi	r28, 0x65	; 101
 302:	19 f4       	brne	.+6      	; 0x30a <main+0xaa>
		{
			forward_left();
 304:	0e 94 8b 00 	call	0x116	; 0x116 <forward_left>
 308:	23 c0       	rjmp	.+70     	; 0x350 <main+0xf0>
		}
		else if ( d == 'E')
 30a:	c5 34       	cpi	r28, 0x45	; 69
 30c:	19 f4       	brne	.+6      	; 0x314 <main+0xb4>
		{
			forward_right();
 30e:	0e 94 81 00 	call	0x102	; 0x102 <forward_right>
 312:	1e c0       	rjmp	.+60     	; 0x350 <main+0xf0>
		}
		else if ( d == 'r')
 314:	c2 37       	cpi	r28, 0x72	; 114
 316:	19 f4       	brne	.+6      	; 0x31e <main+0xbe>
		{
			backward_left();
 318:	0e 94 a0 00 	call	0x140	; 0x140 <backward_left>
 31c:	19 c0       	rjmp	.+50     	; 0x350 <main+0xf0>
		}
		else if ( d == 'R')
 31e:	c2 35       	cpi	r28, 0x52	; 82
 320:	19 f4       	brne	.+6      	; 0x328 <main+0xc8>
		{
			backward_right();
 322:	0e 94 96 00 	call	0x12c	; 0x12c <backward_right>
 326:	14 c0       	rjmp	.+40     	; 0x350 <main+0xf0>
		}
		else if ( d == 'w')
 328:	c7 37       	cpi	r28, 0x77	; 119
 32a:	19 f4       	brne	.+6      	; 0x332 <main+0xd2>
		{
			turn90left();
 32c:	0e 94 b6 00 	call	0x16c	; 0x16c <turn90left>
 330:	0f c0       	rjmp	.+30     	; 0x350 <main+0xf0>
		}
		else if ( d == 'W')
 332:	c7 35       	cpi	r28, 0x57	; 87
 334:	19 f4       	brne	.+6      	; 0x33c <main+0xdc>
		{
			turn90right();
 336:	0e 94 ab 00 	call	0x156	; 0x156 <turn90right>
 33a:	0a c0       	rjmp	.+20     	; 0x350 <main+0xf0>
		}
		else if ( d == 'a' )
 33c:	c1 36       	cpi	r28, 0x61	; 97
 33e:	19 f4       	brne	.+6      	; 0x346 <main+0xe6>
		{
			stop();
 340:	0e 94 78 00 	call	0xf0	; 0xf0 <stop>
 344:	05 c0       	rjmp	.+10     	; 0x350 <main+0xf0>
		}
		/////////*** END MOVING ***//////
		
		
		///////*** speed
		if ( d == 'T')
 346:	c4 35       	cpi	r28, 0x54	; 84
 348:	19 f4       	brne	.+6      	; 0x350 <main+0xf0>
		{
			s = 255;
 34a:	c0 92 60 00 	sts	0x0060, r12
 34e:	17 c0       	rjmp	.+46     	; 0x37e <main+0x11e>
		} 
		else if( d == 't')
 350:	c4 37       	cpi	r28, 0x74	; 116
 352:	19 f4       	brne	.+6      	; 0x35a <main+0xfa>
		{
			s = 200;
 354:	b0 92 60 00 	sts	0x0060, r11
 358:	12 c0       	rjmp	.+36     	; 0x37e <main+0x11e>
		}
		else if ( d == 'Y')
 35a:	c9 35       	cpi	r28, 0x59	; 89
 35c:	19 f4       	brne	.+6      	; 0x364 <main+0x104>
		{
			s = 150;
 35e:	a0 92 60 00 	sts	0x0060, r10
 362:	0d c0       	rjmp	.+26     	; 0x37e <main+0x11e>
		}
		else if ( d == 'y')
 364:	c9 37       	cpi	r28, 0x79	; 121
 366:	19 f4       	brne	.+6      	; 0x36e <main+0x10e>
		{
			s = 100;
 368:	60 92 60 00 	sts	0x0060, r6
 36c:	08 c0       	rjmp	.+16     	; 0x37e <main+0x11e>
		}
		///////*** end speed
		
		
		////////**** Griper ****///////
		if ( d == 'O')
 36e:	cf 34       	cpi	r28, 0x4F	; 79
 370:	31 f4       	brne	.+12     	; 0x37e <main+0x11e>
		{
			
			angle(535);
 372:	87 e1       	ldi	r24, 0x17	; 23
 374:	92 e0       	ldi	r25, 0x02	; 2
 376:	0e 94 1c 01 	call	0x238	; 0x238 <angle>
			position = 525;
 37a:	84 01       	movw	r16, r8
 37c:	2c c0       	rjmp	.+88     	; 0x3d6 <main+0x176>
			
		}
		else if ( d == 'o')
 37e:	cf 36       	cpi	r28, 0x6F	; 111
 380:	39 f4       	brne	.+14     	; 0x390 <main+0x130>
		{
			angle(100);
 382:	84 e6       	ldi	r24, 0x64	; 100
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 1c 01 	call	0x238	; 0x238 <angle>
			position = 100;
 38a:	04 e6       	ldi	r16, 0x64	; 100
 38c:	10 e0       	ldi	r17, 0x00	; 0
 38e:	23 c0       	rjmp	.+70     	; 0x3d6 <main+0x176>
				
			}
			//position=200;
			*/
		}
		else if ( d == 'P')
 390:	c0 35       	cpi	r28, 0x50	; 80
 392:	39 f4       	brne	.+14     	; 0x3a2 <main+0x142>
		{
			angle(425);
 394:	89 ea       	ldi	r24, 0xA9	; 169
 396:	91 e0       	ldi	r25, 0x01	; 1
 398:	0e 94 1c 01 	call	0x238	; 0x238 <angle>
			position = 425;
 39c:	09 ea       	ldi	r16, 0xA9	; 169
 39e:	11 e0       	ldi	r17, 0x01	; 1
 3a0:	1a c0       	rjmp	.+52     	; 0x3d6 <main+0x176>
		}
		else if ( d =='p')
 3a2:	c0 37       	cpi	r28, 0x70	; 112
 3a4:	39 f4       	brne	.+14     	; 0x3b4 <main+0x154>
		{
			angle(200);
 3a6:	88 ec       	ldi	r24, 0xC8	; 200
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	0e 94 1c 01 	call	0x238	; 0x238 <angle>
			position = 200;
 3ae:	08 ec       	ldi	r16, 0xC8	; 200
 3b0:	10 e0       	ldi	r17, 0x00	; 0
 3b2:	11 c0       	rjmp	.+34     	; 0x3d6 <main+0x176>
		}
		else if ( d == 'A')
 3b4:	c1 34       	cpi	r28, 0x41	; 65
 3b6:	39 f4       	brne	.+14     	; 0x3c6 <main+0x166>
		{
			angle(316);
 3b8:	8c e3       	ldi	r24, 0x3C	; 60
 3ba:	91 e0       	ldi	r25, 0x01	; 1
 3bc:	0e 94 1c 01 	call	0x238	; 0x238 <angle>
			position = 316;
 3c0:	0c e3       	ldi	r16, 0x3C	; 60
 3c2:	11 e0       	ldi	r17, 0x01	; 1
 3c4:	08 c0       	rjmp	.+16     	; 0x3d6 <main+0x176>
		
		
		
		//////////********test servo
		
		if (d=='D')
 3c6:	c4 34       	cpi	r28, 0x44	; 68
 3c8:	31 f4       	brne	.+12     	; 0x3d6 <main+0x176>
		{
			position+=5;
 3ca:	0b 5f       	subi	r16, 0xFB	; 251
 3cc:	1f 4f       	sbci	r17, 0xFF	; 255
			angle(position);
 3ce:	c8 01       	movw	r24, r16
 3d0:	0e 94 1c 01 	call	0x238	; 0x238 <angle>
 3d4:	61 c0       	rjmp	.+194    	; 0x498 <main+0x238>
		}
		else if (d=='d')
 3d6:	c4 36       	cpi	r28, 0x64	; 100
 3d8:	31 f4       	brne	.+12     	; 0x3e6 <main+0x186>
		{
			position-=5;
 3da:	05 50       	subi	r16, 0x05	; 5
 3dc:	10 40       	sbci	r17, 0x00	; 0
			angle(position);
 3de:	c8 01       	movw	r24, r16
 3e0:	0e 94 1c 01 	call	0x238	; 0x238 <angle>
 3e4:	59 c0       	rjmp	.+178    	; 0x498 <main+0x238>
		}
		else if (d=='F')
 3e6:	c6 34       	cpi	r28, 0x46	; 70
 3e8:	31 f4       	brne	.+12     	; 0x3f6 <main+0x196>
		{
			position+=10;
 3ea:	06 5f       	subi	r16, 0xF6	; 246
 3ec:	1f 4f       	sbci	r17, 0xFF	; 255
			angle(position);
 3ee:	c8 01       	movw	r24, r16
 3f0:	0e 94 1c 01 	call	0x238	; 0x238 <angle>
 3f4:	51 c0       	rjmp	.+162    	; 0x498 <main+0x238>
		}
		else if (d=='f')
 3f6:	c6 36       	cpi	r28, 0x66	; 102
 3f8:	31 f4       	brne	.+12     	; 0x406 <main+0x1a6>
		{
			position-=10;
 3fa:	0a 50       	subi	r16, 0x0A	; 10
 3fc:	10 40       	sbci	r17, 0x00	; 0
			angle(position);
 3fe:	c8 01       	movw	r24, r16
 400:	0e 94 1c 01 	call	0x238	; 0x238 <angle>
 404:	49 c0       	rjmp	.+146    	; 0x498 <main+0x238>
		}
		else if (d=='G')
 406:	c7 34       	cpi	r28, 0x47	; 71
 408:	31 f4       	brne	.+12     	; 0x416 <main+0x1b6>
		{
			position+=20;
 40a:	0c 5e       	subi	r16, 0xEC	; 236
 40c:	1f 4f       	sbci	r17, 0xFF	; 255
			angle(position);
 40e:	c8 01       	movw	r24, r16
 410:	0e 94 1c 01 	call	0x238	; 0x238 <angle>
 414:	41 c0       	rjmp	.+130    	; 0x498 <main+0x238>
		}
		else if (d=='g')
 416:	c7 36       	cpi	r28, 0x67	; 103
 418:	31 f4       	brne	.+12     	; 0x426 <main+0x1c6>
		{
			position-=20;
 41a:	04 51       	subi	r16, 0x14	; 20
 41c:	10 40       	sbci	r17, 0x00	; 0
			angle(position);
 41e:	c8 01       	movw	r24, r16
 420:	0e 94 1c 01 	call	0x238	; 0x238 <angle>
 424:	39 c0       	rjmp	.+114    	; 0x498 <main+0x238>
		}
		else if (d=='H')
 426:	c8 34       	cpi	r28, 0x48	; 72
 428:	31 f4       	brne	.+12     	; 0x436 <main+0x1d6>
		{
			position+=30;
 42a:	02 5e       	subi	r16, 0xE2	; 226
 42c:	1f 4f       	sbci	r17, 0xFF	; 255
			angle(position);
 42e:	c8 01       	movw	r24, r16
 430:	0e 94 1c 01 	call	0x238	; 0x238 <angle>
 434:	31 c0       	rjmp	.+98     	; 0x498 <main+0x238>
		}
		else if (d=='h')
 436:	c8 36       	cpi	r28, 0x68	; 104
 438:	31 f4       	brne	.+12     	; 0x446 <main+0x1e6>
		{
			position-=30;
 43a:	0e 51       	subi	r16, 0x1E	; 30
 43c:	10 40       	sbci	r17, 0x00	; 0
			angle(position);
 43e:	c8 01       	movw	r24, r16
 440:	0e 94 1c 01 	call	0x238	; 0x238 <angle>
 444:	29 c0       	rjmp	.+82     	; 0x498 <main+0x238>
		}
		else if (d=='J')
 446:	ca 34       	cpi	r28, 0x4A	; 74
 448:	31 f4       	brne	.+12     	; 0x456 <main+0x1f6>
		{
			position+=40;
 44a:	08 5d       	subi	r16, 0xD8	; 216
 44c:	1f 4f       	sbci	r17, 0xFF	; 255
			angle(position);
 44e:	c8 01       	movw	r24, r16
 450:	0e 94 1c 01 	call	0x238	; 0x238 <angle>
 454:	21 c0       	rjmp	.+66     	; 0x498 <main+0x238>
		}
		else if (d=='j')
 456:	ca 36       	cpi	r28, 0x6A	; 106
 458:	31 f4       	brne	.+12     	; 0x466 <main+0x206>
		{
			position-=40;
 45a:	08 52       	subi	r16, 0x28	; 40
 45c:	10 40       	sbci	r17, 0x00	; 0
			angle(position);
 45e:	c8 01       	movw	r24, r16
 460:	0e 94 1c 01 	call	0x238	; 0x238 <angle>
 464:	19 c0       	rjmp	.+50     	; 0x498 <main+0x238>
		}
		else if (d=='K')
 466:	cb 34       	cpi	r28, 0x4B	; 75
 468:	31 f4       	brne	.+12     	; 0x476 <main+0x216>
		{
			position+=50;
 46a:	0e 5c       	subi	r16, 0xCE	; 206
 46c:	1f 4f       	sbci	r17, 0xFF	; 255
			angle(position);
 46e:	c8 01       	movw	r24, r16
 470:	0e 94 1c 01 	call	0x238	; 0x238 <angle>
 474:	11 c0       	rjmp	.+34     	; 0x498 <main+0x238>
		}
		else if (d=='k')
 476:	cb 36       	cpi	r28, 0x6B	; 107
 478:	31 f4       	brne	.+12     	; 0x486 <main+0x226>
		{
			position-=50;
 47a:	02 53       	subi	r16, 0x32	; 50
 47c:	10 40       	sbci	r17, 0x00	; 0
			angle(position);
 47e:	c8 01       	movw	r24, r16
 480:	0e 94 1c 01 	call	0x238	; 0x238 <angle>
 484:	09 c0       	rjmp	.+18     	; 0x498 <main+0x238>
			x = 50;
		}
		
		
		
		if ( d == 'L')
 486:	cc 34       	cpi	r28, 0x4C	; 76
 488:	39 f4       	brne	.+14     	; 0x498 <main+0x238>
		{
			open();
 48a:	0e 94 5a 00 	call	0xb4	; 0xb4 <open>
			gmotor_speed(2000);
 48e:	80 ed       	ldi	r24, 0xD0	; 208
 490:	97 e0       	ldi	r25, 0x07	; 7
 492:	0e 94 55 00 	call	0xaa	; 0xaa <gmotor_speed>
 496:	24 c0       	rjmp	.+72     	; 0x4e0 <main+0x280>
		} 
		else if ( d == 'l')
 498:	cc 36       	cpi	r28, 0x6C	; 108
 49a:	39 f4       	brne	.+14     	; 0x4aa <main+0x24a>
		{
			close();
 49c:	0e 94 5d 00 	call	0xba	; 0xba <close>
			gmotor_speed(2000);
 4a0:	80 ed       	ldi	r24, 0xD0	; 208
 4a2:	97 e0       	ldi	r25, 0x07	; 7
 4a4:	0e 94 55 00 	call	0xaa	; 0xaa <gmotor_speed>
 4a8:	1b c0       	rjmp	.+54     	; 0x4e0 <main+0x280>
		}
		else if ( d == 'V')
 4aa:	c6 35       	cpi	r28, 0x56	; 86
 4ac:	29 f4       	brne	.+10     	; 0x4b8 <main+0x258>
		{
			gmotor_speed(0);
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	0e 94 55 00 	call	0xaa	; 0xaa <gmotor_speed>
 4b6:	14 c0       	rjmp	.+40     	; 0x4e0 <main+0x280>
				
		/////**** end Griper
		   
		
		/////**** sss
		if ( d =='S')
 4b8:	c3 35       	cpi	r28, 0x53	; 83
 4ba:	91 f4       	brne	.+36     	; 0x4e0 <main+0x280>
		{
			s=0;
 4bc:	10 92 60 00 	sts	0x0060, r1
			x=0;
			angle(150);
 4c0:	86 e9       	ldi	r24, 0x96	; 150
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	0e 94 1c 01 	call	0x238	; 0x238 <angle>
			PORTA = 2 ;
 4c8:	db bb       	out	0x1b, r29	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ca:	8f ef       	ldi	r24, 0xFF	; 255
 4cc:	99 e6       	ldi	r25, 0x69	; 105
 4ce:	a8 e1       	ldi	r26, 0x18	; 24
 4d0:	81 50       	subi	r24, 0x01	; 1
 4d2:	90 40       	sbci	r25, 0x00	; 0
 4d4:	a0 40       	sbci	r26, 0x00	; 0
 4d6:	e1 f7       	brne	.-8      	; 0x4d0 <main+0x270>
 4d8:	00 c0       	rjmp	.+0      	; 0x4da <main+0x27a>
 4da:	00 00       	nop
			_delay_ms(500);
			PORTA=0;
 4dc:	1b ba       	out	0x1b, r1	; 27
 4de:	27 c0       	rjmp	.+78     	; 0x52e <main+0x2ce>
			
		} 
		else if ( d == 's')
 4e0:	c3 37       	cpi	r28, 0x73	; 115
 4e2:	29 f5       	brne	.+74     	; 0x52e <main+0x2ce>
		{
			s=50;
 4e4:	70 92 60 00 	sts	0x0060, r7
			x=30;
			angle(450);
 4e8:	82 ec       	ldi	r24, 0xC2	; 194
 4ea:	91 e0       	ldi	r25, 0x01	; 1
 4ec:	0e 94 1c 01 	call	0x238	; 0x238 <angle>
			PORTA = 2 ;
 4f0:	db bb       	out	0x1b, r29	; 27
 4f2:	8f ef       	ldi	r24, 0xFF	; 255
 4f4:	99 e6       	ldi	r25, 0x69	; 105
 4f6:	a8 e1       	ldi	r26, 0x18	; 24
 4f8:	81 50       	subi	r24, 0x01	; 1
 4fa:	90 40       	sbci	r25, 0x00	; 0
 4fc:	a0 40       	sbci	r26, 0x00	; 0
 4fe:	e1 f7       	brne	.-8      	; 0x4f8 <main+0x298>
 500:	00 c0       	rjmp	.+0      	; 0x502 <main+0x2a2>
 502:	00 00       	nop
			_delay_ms(500);
			PORTA=0;
 504:	1b ba       	out	0x1b, r1	; 27
 506:	8f ef       	ldi	r24, 0xFF	; 255
 508:	99 e6       	ldi	r25, 0x69	; 105
 50a:	a8 e1       	ldi	r26, 0x18	; 24
 50c:	81 50       	subi	r24, 0x01	; 1
 50e:	90 40       	sbci	r25, 0x00	; 0
 510:	a0 40       	sbci	r26, 0x00	; 0
 512:	e1 f7       	brne	.-8      	; 0x50c <main+0x2ac>
 514:	00 c0       	rjmp	.+0      	; 0x516 <main+0x2b6>
 516:	00 00       	nop
			_delay_ms(500);
			PORTA = 2 ;
 518:	db bb       	out	0x1b, r29	; 27
 51a:	8f ef       	ldi	r24, 0xFF	; 255
 51c:	99 e6       	ldi	r25, 0x69	; 105
 51e:	a8 e1       	ldi	r26, 0x18	; 24
 520:	81 50       	subi	r24, 0x01	; 1
 522:	90 40       	sbci	r25, 0x00	; 0
 524:	a0 40       	sbci	r26, 0x00	; 0
 526:	e1 f7       	brne	.-8      	; 0x520 <main+0x2c0>
 528:	00 c0       	rjmp	.+0      	; 0x52a <main+0x2ca>
 52a:	00 00       	nop
			_delay_ms(500);
			PORTA=0;
 52c:	1b ba       	out	0x1b, r1	; 27
		
		
		
		////**** angle 
		
		if (position>ba)
 52e:	e0 16       	cp	r14, r16
 530:	f1 06       	cpc	r15, r17
 532:	14 f4       	brge	.+4      	; 0x538 <main+0x2d8>
		{
			PORTA = 2;			
 534:	db bb       	out	0x1b, r29	; 27
 536:	01 c0       	rjmp	.+2      	; 0x53a <main+0x2da>
		}
		else
		{
			pin_write(PORTA, pin1, 0);
 538:	d9 98       	cbi	0x1b, 1	; 27
		}
		
		
		if ( d == 'B')
 53a:	c2 34       	cpi	r28, 0x42	; 66
 53c:	81 f4       	brne	.+32     	; 0x55e <main+0x2fe>
		{
			ba+=10;
 53e:	aa e0       	ldi	r26, 0x0A	; 10
 540:	b0 e0       	ldi	r27, 0x00	; 0
 542:	ea 0e       	add	r14, r26
 544:	fb 1e       	adc	r15, r27
			PORTA = 2;
 546:	db bb       	out	0x1b, r29	; 27
 548:	8f ef       	ldi	r24, 0xFF	; 255
 54a:	95 ea       	ldi	r25, 0xA5	; 165
 54c:	ae e0       	ldi	r26, 0x0E	; 14
 54e:	81 50       	subi	r24, 0x01	; 1
 550:	90 40       	sbci	r25, 0x00	; 0
 552:	a0 40       	sbci	r26, 0x00	; 0
 554:	e1 f7       	brne	.-8      	; 0x54e <main+0x2ee>
 556:	00 c0       	rjmp	.+0      	; 0x558 <main+0x2f8>
 558:	00 00       	nop
			_delay_ms(300);
			PORTA = 0;
 55a:	1b ba       	out	0x1b, r1	; 27
 55c:	b4 ce       	rjmp	.-664    	; 0x2c6 <main+0x66>
		}
		else if ( d == 'b')
 55e:	c2 36       	cpi	r28, 0x62	; 98
 560:	09 f0       	breq	.+2      	; 0x564 <main+0x304>
 562:	b1 ce       	rjmp	.-670    	; 0x2c6 <main+0x66>
		{
			ba-=10;
 564:	a6 ef       	ldi	r26, 0xF6	; 246
 566:	bf ef       	ldi	r27, 0xFF	; 255
 568:	ea 0e       	add	r14, r26
 56a:	fb 1e       	adc	r15, r27
			PORTA = 2;
 56c:	db bb       	out	0x1b, r29	; 27
 56e:	8f ef       	ldi	r24, 0xFF	; 255
 570:	95 ea       	ldi	r25, 0xA5	; 165
 572:	ae e0       	ldi	r26, 0x0E	; 14
 574:	81 50       	subi	r24, 0x01	; 1
 576:	90 40       	sbci	r25, 0x00	; 0
 578:	a0 40       	sbci	r26, 0x00	; 0
 57a:	e1 f7       	brne	.-8      	; 0x574 <main+0x314>
 57c:	00 c0       	rjmp	.+0      	; 0x57e <main+0x31e>
 57e:	00 00       	nop
			_delay_ms(300);
			PORTA = 0;
 580:	1b ba       	out	0x1b, r1	; 27
 582:	a1 ce       	rjmp	.-702    	; 0x2c6 <main+0x66>

00000584 <USART_Transmit>:


void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer*/
	while( !( UCSRA & (1<<UDRE)) )
 584:	5d 9b       	sbis	0x0b, 5	; 11
 586:	fe cf       	rjmp	.-4      	; 0x584 <USART_Transmit>
	;
	/* Put data into buffer, sends the data*/
	UDR = data;
 588:	8c b9       	out	0x0c, r24	; 12
}
 58a:	08 95       	ret

0000058c <USART_Receive>:

unsigned char USART_Receive( void)
{
	/* Wait for data to be received*/
	while( !(UCSRA & (1<<RXC)) );
 58c:	5f 9b       	sbis	0x0b, 7	; 11
 58e:	fe cf       	rjmp	.-4      	; 0x58c <USART_Receive>
	/* Get and return received data from buffer*/
	return UDR;
 590:	8c b1       	in	r24, 0x0c	; 12
}
 592:	08 95       	ret

00000594 <USART_Init>:

void USART_Init( unsigned int b )
{
	/* Set baud rate*/
	unsigned int baud = 16000000/16/b-1;
 594:	9c 01       	movw	r18, r24
 596:	40 e0       	ldi	r20, 0x00	; 0
 598:	50 e0       	ldi	r21, 0x00	; 0
 59a:	60 e4       	ldi	r22, 0x40	; 64
 59c:	72 e4       	ldi	r23, 0x42	; 66
 59e:	8f e0       	ldi	r24, 0x0F	; 15
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <__divmodsi4>
 5a6:	21 50       	subi	r18, 0x01	; 1
 5a8:	30 40       	sbci	r19, 0x00	; 0
	UBRRH = (unsigned char)(baud>>8);
 5aa:	30 bd       	out	0x20, r19	; 32
	UBRRL = (unsigned char)baud;
 5ac:	29 b9       	out	0x09, r18	; 9
	/* Enable receiver and transmitter*/
	UCSRB = (1<<RXEN)|(1<<TXEN);
 5ae:	88 e1       	ldi	r24, 0x18	; 24
 5b0:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit*/
	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
 5b2:	8e e8       	ldi	r24, 0x8E	; 142
 5b4:	80 bd       	out	0x20, r24	; 32
}
 5b6:	08 95       	ret

000005b8 <__divmodsi4>:
 5b8:	97 fb       	bst	r25, 7
 5ba:	09 2e       	mov	r0, r25
 5bc:	05 26       	eor	r0, r21
 5be:	0e d0       	rcall	.+28     	; 0x5dc <__divmodsi4_neg1>
 5c0:	57 fd       	sbrc	r21, 7
 5c2:	04 d0       	rcall	.+8      	; 0x5cc <__divmodsi4_neg2>
 5c4:	14 d0       	rcall	.+40     	; 0x5ee <__udivmodsi4>
 5c6:	0a d0       	rcall	.+20     	; 0x5dc <__divmodsi4_neg1>
 5c8:	00 1c       	adc	r0, r0
 5ca:	38 f4       	brcc	.+14     	; 0x5da <__divmodsi4_exit>

000005cc <__divmodsi4_neg2>:
 5cc:	50 95       	com	r21
 5ce:	40 95       	com	r20
 5d0:	30 95       	com	r19
 5d2:	21 95       	neg	r18
 5d4:	3f 4f       	sbci	r19, 0xFF	; 255
 5d6:	4f 4f       	sbci	r20, 0xFF	; 255
 5d8:	5f 4f       	sbci	r21, 0xFF	; 255

000005da <__divmodsi4_exit>:
 5da:	08 95       	ret

000005dc <__divmodsi4_neg1>:
 5dc:	f6 f7       	brtc	.-4      	; 0x5da <__divmodsi4_exit>
 5de:	90 95       	com	r25
 5e0:	80 95       	com	r24
 5e2:	70 95       	com	r23
 5e4:	61 95       	neg	r22
 5e6:	7f 4f       	sbci	r23, 0xFF	; 255
 5e8:	8f 4f       	sbci	r24, 0xFF	; 255
 5ea:	9f 4f       	sbci	r25, 0xFF	; 255
 5ec:	08 95       	ret

000005ee <__udivmodsi4>:
 5ee:	a1 e2       	ldi	r26, 0x21	; 33
 5f0:	1a 2e       	mov	r1, r26
 5f2:	aa 1b       	sub	r26, r26
 5f4:	bb 1b       	sub	r27, r27
 5f6:	fd 01       	movw	r30, r26
 5f8:	0d c0       	rjmp	.+26     	; 0x614 <__udivmodsi4_ep>

000005fa <__udivmodsi4_loop>:
 5fa:	aa 1f       	adc	r26, r26
 5fc:	bb 1f       	adc	r27, r27
 5fe:	ee 1f       	adc	r30, r30
 600:	ff 1f       	adc	r31, r31
 602:	a2 17       	cp	r26, r18
 604:	b3 07       	cpc	r27, r19
 606:	e4 07       	cpc	r30, r20
 608:	f5 07       	cpc	r31, r21
 60a:	20 f0       	brcs	.+8      	; 0x614 <__udivmodsi4_ep>
 60c:	a2 1b       	sub	r26, r18
 60e:	b3 0b       	sbc	r27, r19
 610:	e4 0b       	sbc	r30, r20
 612:	f5 0b       	sbc	r31, r21

00000614 <__udivmodsi4_ep>:
 614:	66 1f       	adc	r22, r22
 616:	77 1f       	adc	r23, r23
 618:	88 1f       	adc	r24, r24
 61a:	99 1f       	adc	r25, r25
 61c:	1a 94       	dec	r1
 61e:	69 f7       	brne	.-38     	; 0x5fa <__udivmodsi4_loop>
 620:	60 95       	com	r22
 622:	70 95       	com	r23
 624:	80 95       	com	r24
 626:	90 95       	com	r25
 628:	9b 01       	movw	r18, r22
 62a:	ac 01       	movw	r20, r24
 62c:	bd 01       	movw	r22, r26
 62e:	cf 01       	movw	r24, r30
 630:	08 95       	ret

00000632 <_exit>:
 632:	f8 94       	cli

00000634 <__stop_program>:
 634:	ff cf       	rjmp	.-2      	; 0x634 <__stop_program>
